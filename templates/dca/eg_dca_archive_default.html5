$GLOBALS['TL_DCA']['tl_<?= $this->dcaName; ?>'] = [
    'config' => [
        'dataContainer'     => '<?= $this->dataContainer ?>',
<?php if ($this->addParentDca): ?>
        'ptable'            => 'tl_<?= $this->parentDcaName ?>',
<?php endif; if ($this->childDcaName): ?>
        'ctable'            => ['tl_<?= $this->childDcaName ?>'],
<?php endif; ?>
        'switchToEdit'                => true,
        'enableVersioning'  => <?= $this->enableVersioning ? 'true' : 'false' ?>,
        'onload_callback' => [
            ['tl_<?= $this->dcaName ?>', 'checkPermission'],
<?php if ($this->addOnLoadCallbacks): ?>
<?php foreach ($this->onLoadCallbacks as $intId => $arrCallback): ?>            ['<?= $arrCallback['class'] ?>', '<?= $arrCallback['method'] ?>']<?php if ($intId != count($this->onLoadCallbacks) - 1): ?>,
<?php endif; ?><?php endforeach; ?>

<?php endif; ?>
        ],
        'onsubmit_callback' => [
            ['huh.utils.dca', 'setDateAdded'],
<?php if ($this->addOnSubmitCallbacks): ?>
<?php foreach ($this->onSubmitCallbacks as $intId => $arrCallback): ?>            ['<?= $arrCallback['class'] ?>', '<?= $arrCallback['method'] ?>']<?php if ($intId != count($this->onSubmitCallbacks) - 1): ?>,
<?php endif; ?><?php endforeach; ?>

<?php endif; ?>
        ],
        'oncopy_callback'   => [
            ['huh.utils.dca', 'setDateAddedOnCopy'],
        ],
        'sql' => [
            'keys' => [
                'id' => 'primary'
            ]
        ]
    ],
    'list' => [
        'label' => [
            'fields' => ['title'],
            'format' => '%s'
        ],
        'sorting'           => [
            'mode'                  => <?= $this->sortingMode ?>,
<?php if ($this->addSortingFields): ?>
            'fields'                => [<?php foreach ($this->sortingFields as $intId => $arrField): ?>'<?= $arrField['field'] ?><?= $arrField['sorting'] == 'ASC' ? ' ' . $arrField['sorting'] == 'ASC' : '' ?>'<?php if ($intId != count($this->sortingFields) - 1): ?>, <?php endif; ?><?php endforeach; ?>],
<?php endif; ?>
<?php if ($this->addHeaderFields): ?>
            'headerFields'          => [<?php foreach ($this->headerFields as $intId => $strField): ?>'<?= $strField ?>'<?php if ($intId != count($this->headerFields) - 1): ?>, <?php endif; ?><?php endforeach; ?>],
<?php endif; ?>
            'panelLayout'           => 'filter;search,limit'<?php if ($this->addParentDca): ?>,
            'child_record_callback' => ['tl_<?= $this->parentDcaName ?>', 'listChildren']
<?php endif; ?>

        ],
        'global_operations' => [
<?php if ($this->addGlobalOperations) foreach ($this->globalOperations as $strAct): ?>
<?php if ($strAct == 'all'): ?>
            'all'    => [
                'label'      => &$GLOBALS['TL_LANG']['MSC']['all'],
                'href'       => 'act=select',
                'class'      => 'header_edit_all',
                'attributes' => 'onclick="Backend.getScrollOffset();"'
            ],
<?php else: ?>
            '<?= $strAct ?>'    => [
                'label'      => &$GLOBALS['TL_LANG']['MSC']['<?= $strAct ?>'],
                'href'       => 'act=<?= $strAct ?>',
                'class'      => 'header_<?= $strAct ?>',
                'attributes' => 'onclick="Backend.getScrollOffset();"'
            ],
<?php endif ?>
<?php endforeach ?>
        ],
        'operations' => [
<?php if ($this->addOperations) foreach ($this->operations as $strAct): ?>
<?php if ($strAct == 'edit'): ?>
            'edit' => [
                'label'               => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName; ?>']['edit'],
                'href'                => 'table=tl_<?= $this->childDcaName ?>',
                'icon'                => 'edit.gif'
            ],
            'editheader' => [
                'label'               => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName; ?>']['editheader'],
                'href'                => 'act=edit',
                'icon'                => 'header.gif',
                'button_callback'     => ['tl_<?= $this->dcaName; ?>', 'editHeader']
            ],
<?php elseif ($strAct == 'copy' || $strAct == 'delete'): ?>
            '<?= $strAct ?>' => [
                'label'               => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName; ?>']['copy'],
                'href'                => 'act=<?= $strAct ?>',
                'icon'                => '<?= $strAct ?>.gif',
    <?php if ($strAct == 'delete'): ?>
            'attributes'          => 'onclick="if(!confirm(\'' . $GLOBALS['TL_LANG']['MSC']['deleteConfirm'] . '\'))return false;Backend.getScrollOffset()"',
    <?php endif ?>
            'button_callback'     => ['tl_<?= $this->dcaName; ?>', '<?= $strAct ?>Archive']
            ],
<?php else: ?>
            '<?= $strAct ?>' => [
                'label'               => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName; ?>']['<?= $strAct ?>'],
                'href'                => 'act=<?= $strAct ?>',
                'icon'                => '<?= $strAct ?>.gif'
            ],
<?php endif; ?>
<?php endforeach; ?>
        ]
    ],
    'palettes' => [
        '__selector__' => [<?php if ($this->addPublish): ?>'published'<?php endif; ?>],
        'default' => '<?php if ($this->addTitle): ?>{general_legend},title;<?php endif; ?><?php if ($this->addPublish): ?>{publish_legend},published;<?php endif; ?>'
    ],
<?php if ($this->addPublish): ?>
    'subpalettes' => [
        'published'    => 'start,stop'
    ],
<?php endif; ?>
    'fields'   => [
        'id' => [
            'sql'                     => "int(10) unsigned NOT NULL auto_increment"
        ],
<?php if ($this->addParentDca): ?>
        'pid' => [
            'foreignKey'              => 'tl_<?= $this->parentDcaName ?>.<?= $this->parentDcaForeignKey ?>',
            'sql'                     => "int(10) unsigned NOT NULL default '0'",
            'relation'                => ['type'=>'belongsTo', 'load'=>'eager']
        ],
<?php endif; ?>
        'tstamp' => [
            'label'                   => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName ?>']['tstamp'],
            'sql'                     => "int(10) unsigned NOT NULL default '0'"
        ],
        'dateAdded' => [
            'label'                   => &$GLOBALS['TL_LANG']['MSC']['dateAdded'],
            'sorting'                 => true,
            'flag'                    => 6,
            'eval'                    => ['rgxp'=>'datim', 'doNotCopy' => true],
            'sql'                     => "int(10) unsigned NOT NULL default '0'"
        ],
<?php if ($this->addTitle): ?>
        'title' => [
            'label'                   => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName ?>']['title'],
            'exclude'                 => true,
            'search'                  => true,
            'sorting'                 => true,
            'flag'                    => 1,
            'inputType'               => 'text',
            'eval'                    => ['mandatory' => true, 'tl_class'=>'w50'],
            'sql'                     => "varchar(255) NOT NULL default ''"
        ],
<?php endif; ?>
<?php if ($this->addPublish): ?>
        'published' => [
            'label'                   => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName ?>']['published'],
            'exclude'                 => true,
            'filter'                  => true,
            'inputType'               => 'checkbox',
            'eval'                    => ['doNotCopy'=>true, 'submitOnChange' => true],
            'sql'                     => "char(1) NOT NULL default ''"
        ],
        'start' => [
            'label'                   => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName ?>']['start'],
            'exclude'                 => true,
            'inputType'               => 'text',
            'eval'                    => ['rgxp'=>'datim', 'datepicker'=>true, 'tl_class'=>'w50 wizard'],
            'sql'                     => "varchar(10) NOT NULL default ''"
        ],
        'stop' => [
            'label'                   => &$GLOBALS['TL_LANG']['tl_<?= $this->dcaName ?>']['stop'],
            'exclude'                 => true,
            'inputType'               => 'text',
            'eval'                    => ['rgxp'=>'datim', 'datepicker'=>true, 'tl_class'=>'w50 wizard'],
            'sql'                     => "varchar(10) NOT NULL default ''"
        ]
<?php endif; ?>
    ]
];

class tl_<?= $this->dcaName; ?> extends \Contao\Backend
{
    public function checkPermission()
    {
        $user     = \Contao\BackendUser::getInstance();
        $database = \Contao\Database::getInstance();

        if ($user->isAdmin)
        {
            return;
        }
        
        // Set root IDs
        if (!is_array($user-><?= $this->moduleName; ?>s) || empty($user-><?= $this->moduleName; ?>s))
        {
            $root = [0];
        }
        else
        {
            $root = $user-><?= $this->moduleName; ?>s;
        }
        
        $GLOBALS['TL_DCA']['tl_<?= $this->dcaName; ?>']['list']['sorting']['root'] = $root;
        
        // Check permissions to add archives
        if (!$user->hasAccess('create', '<?= $this->moduleName; ?>p'))
        {
            $GLOBALS['TL_DCA']['tl_<?= $this->dcaName; ?>']['config']['closed'] = true;
        }
        
        /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $objSession */
        $objSession = \Contao\System::getContainer()->get('session');
        
        // Check current action
        switch (\Contao\Input::get('act'))
        {
            case 'create':
            case 'select':
                // Allow
                break;
        
            case 'edit':
                // Dynamically add the record to the user profile
                if (!in_array(\Contao\Input::get('id'), $root))
                {
                    /** @var \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface $sessionBag */
                    $sessionBag = $objSession->getBag('contao_backend');
            
                    $arrNew = $sessionBag->get('new_records');
            
                    if (is_array($arrNew['tl_<?= $this->dcaName; ?>']) && in_array(\Contao\Input::get('id'), $arrNew['tl_<?= $this->dcaName; ?>']))
                    {
                        // Add the permissions on group level
                        if ($user->inherit != 'custom')
                        {
                            $objGroup = $database->execute("SELECT id, <?= $this->moduleName; ?>s, <?= $this->moduleName; ?>p FROM tl_user_group WHERE id IN(" . implode(',', array_map('intval', $user->groups)) . ")");
                
                            while ($objGroup->next())
                            {
                                $arrModulep = \StringUtil::deserialize($objGroup-><?= $this->moduleName; ?>p);
                
                                if (is_array($arrModulep) && in_array('create', $arrModulep))
                                {
                                    $arrModules = \StringUtil::deserialize($objGroup-><?= $this->moduleName; ?>s, true);
                                    $arrModules[] = \Contao\Input::get('id');
                
                                    $database->prepare("UPDATE tl_user_group SET <?= $this->moduleName; ?>s=? WHERE id=?")->execute(serialize($arrModules), $objGroup->id);
                                }
                            }
                        }
                
                        // Add the permissions on user level
                        if ($user->inherit != 'group')
                        {
                            $user = $database->prepare("SELECT <?= $this->moduleName; ?>s, <?= $this->moduleName; ?>p FROM tl_user WHERE id=?")
                            ->limit(1)
                            ->execute($user->id);
                
                            $arrModulep = \StringUtil::deserialize($user-><?= $this->moduleName; ?>p);
                
                            if (is_array($arrModulep) && in_array('create', $arrModulep))
                            {
                                $arrModules = \StringUtil::deserialize($user-><?= $this->moduleName; ?>s, true);
                                $arrModules[] = \Contao\Input::get('id');
                
                                $database->prepare("UPDATE tl_user SET <?= $this->moduleName; ?>s=? WHERE id=?")
                                ->execute(serialize($arrModules), $user->id);
                            }
                        }
                
                        // Add the new element to the user object
                        $root[] = \Contao\Input::get('id');
                        $user-><?= $this->moduleName; ?>s = $root;
                    }
                }
                // No break;
        
            case 'copy':
            case 'delete':
            case 'show':
                if (!in_array(\Contao\Input::get('id'), $root) || (\Contao\Input::get('act') == 'delete' && !$user->hasAccess('delete', '<?= $this->moduleName; ?>p')))
                {
                    throw new \Contao\CoreBundle\Exception\AccessDeniedException('Not enough permissions to ' . \Contao\Input::get('act') . ' <?= $this->dcaName ?> ID ' . \Contao\Input::get('id') . '.');
                }
                break;
    
            case 'editAll':
            case 'deleteAll':
            case 'overrideAll':
                $session = $objSession->all();
                if (\Contao\Input::get('act') == 'deleteAll' && !$user->hasAccess('delete', '<?= $this->moduleName; ?>p'))
                {
                    $session['CURRENT']['IDS'] = [];
                }
                else
                {
                    $session['CURRENT']['IDS'] = array_intersect($session['CURRENT']['IDS'], $root);
                }
                $objSession->replace($session);
                break;
            
            default:
                if (strlen(\Contao\Input::get('act')))
                {
                    throw new \Contao\CoreBundle\Exception\AccessDeniedException('Not enough permissions to ' . \Contao\Input::get('act') . ' <?= $this->dcaName ?>s.');
                }
                break;
        }
    }

    public function editHeader($row, $href, $label, $title, $icon, $attributes)
    {
        return \Contao\BackendUser::getInstance()->canEditFieldsOf('tl_<?= $this->dcaName; ?>') ? '<a href="'.Controller::addToUrl($href.'&amp;id='.$row['id']) . '&rt=' . \RequestToken::get() . '" title="'.\StringUtil::specialchars($title).'"'.$attributes.'>'.\Image::getHtml($icon, $label).'</a> ' : \Image::getHtml(preg_replace('/\.svg$/i', '_.svg', $icon)).' ';
    }

    public function copyArchive($row, $href, $label, $title, $icon, $attributes)
    {
        return \Contao\BackendUser::getInstance()->hasAccess('create', '<?= $this->moduleName; ?>p') ? '<a href="'.Controller::addToUrl($href.'&amp;id='.$row['id']). '&rt=' . \RequestToken::get() . '" title="'.\StringUtil::specialchars($title).'"'.$attributes.'>'.\Image::getHtml($icon, $label).'</a> ' : \Image::getHtml(preg_replace('/\.svg$/i', '_.svg', $icon)).' ';
    }

    public function deleteArchive($row, $href, $label, $title, $icon, $attributes)
    {
        return \Contao\BackendUser::getInstance()->hasAccess('delete', '<?= $this->moduleName; ?>p') ? '<a href="'.Controller::addToUrl($href.'&amp;id='.$row['id']). '&rt=' . \RequestToken::get() . '" title="'.\StringUtil::specialchars($title).'"'.$attributes.'>'.\Image::getHtml($icon, $label).'</a> ' : \Image::getHtml(preg_replace('/\.svg$/i', '_.svg', $icon)).' ';
    }
}
